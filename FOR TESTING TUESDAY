#include "DualMC33926MotorShield.h"
//********* Toggle one can be used to change direction of motor
//********* Toggle 2 is used to stop/resume the motor action
//********* While toggle 2 used to stop, we can increase or decrease the speed
//******** After done changing the speed, you can resume the system
  #define SPEED 130 // MODIFY YOUR DESIRED SPEED HERE, SPEED CAN ONLY FROM 0 TO 400
  #define MINSPEED 120
  #define MAXSPEED 400
  #define VOL04   825
  #define VOL03   708
  #define VOL02   573
  #define VOL01   450
  #define VOL005  372
  #define VOL002  32
  #define MINPOS1 293
  #define MINPOS2 270
  #define MINPOS3 295
  DualMC33926MotorShield md;
  unsigned long time1;
  int chosenVolume = VOL04;
  int motorSpeed = SPEED;
  unsigned long last = 0;
  unsigned long diff = 0;
  const int analogPin = 2;     // potentiometer wiper (middle terminal) connected to analog pin 3
  const int toggleStop = 5;
  const int inSpeedPin = 6;
  const int reSpeedPin = 13;
  const int pushPullPin = 11;
  const int pausePin = 13;
  int val = 0;           // variable to store the value read
  int prePos = 0;
  int count = 0;
  int first1 = 0;
  int togCounter = 0;
  int inCounter = 1;
  int reCounter = 1;
  int preSpeed;
  int preCount;
  int pushPullCounter = 0;
  int preSpeed2 = 0;
  int dataToggle;
  int dataRe;
  int dataIn;
  int val1 = 0;
  int val2 = 0;
  int val3 = 0;
  int val4 = 0;
  int chosenVal = 0;
  int exceptCounter = 0;
  int preSpeed3 = 0;
  int loopCounter1 = 0;
  int maxCounter = 0;
  int data1;
  int data2;
  int data3;
  int maxFound = chosenVolume;
  int minFound = 280;
  
    void stopIfFault()
  {
    if (md.getFault())
    {
      Serial.println("fault");
      while(1);
    }
  }

   void speedInit()
  {
      if (val <= minFound)
      {
        motorSpeed = 0-SPEED; // currently below or at min, need to go out cross min and stop at max => want to skip the first = set count to 1
        count = 1;            
      }
      else if  (val >= maxFound)
      {
        motorSpeed = SPEED;  //  currently above or at max, need to go in cross max and stop at min, but meet max first => want to skip the first = set count to 0
        count = 0;
      }
      else if (val< maxFound && val > minFound)
      {
        motorSpeed = SPEED; // now moving into,will meet min first and need to reverse, count must = 0 be considered at min
        count = 0;
      }
      preSpeed3 = motorSpeed;
      first1++;
      val3 = val;
      val2 = val;
      val1 = val;
      Serial.println("HAHAH");
      Serial.print("first SPEED is: ");
      Serial.println(motorSpeed);
      Serial.print("position is: ");
      Serial.println(val);
  }

   void buttonCheck1() //when press should stop the syringe and maintain all old data, need another press to resume
  {
    dataToggle = digitalRead(toggleStop);
    dataRe = digitalRead(reSpeedPin);
    dataIn = digitalRead(inSpeedPin);
    if  ( (dataToggle == HIGH) && (togCounter == 0) ) // since initialize counter to 0, make sure that button signal is off at beginning else it will stop immediately
    {
      preSpeed = motorSpeed;
      preCount = count;
      motorSpeed = 0;
      count = 3; // not 0 or 1 so that all data kept same
      togCounter++;
            inCounter = 1;
      reCounter = 1;
      Serial.println("********");
      Serial.print("save speed is: ");
      Serial.println(preSpeed);
      Serial.print("save count is: ");
      Serial.println(preCount);    
      Serial.println("current position");   
      Serial.println(val);    
      Serial.println("********");
      Serial.println();
      
    }
    else if( (dataToggle == HIGH) && (togCounter == 1)) //toggle on
    {
      delay(100);
      if ( (dataIn == LOW) && (inCounter == 0) )
      {
        if (preSpeed > 0)
        {
          preSpeed = preSpeed + 10;
        }
      else
      {
        preSpeed = preSpeed - 10;
      }

      Serial.print("in speed modified is ");
      Serial.println(preSpeed); 
        inCounter++;
      }
      else if((dataIn == HIGH) && (inCounter == 1))
      {
        inCounter = 0;
      }
  
      if ( (dataRe == LOW) && (reCounter == 0))
      {
               if (preSpeed > 0)
        {
          preSpeed = preSpeed - 10;
        }
      else
      {
        preSpeed = preSpeed + 10;
      }
            Serial.print("re speed modified is ");
      Serial.println(preSpeed); 
        reCounter++;
      }
      else if((dataRe == HIGH) && (reCounter == 1))
      {
        reCounter = 0;
      }  
    }
  
    
    else if ( (dataToggle == LOW) && (togCounter == 1)) // toggle off
    {
      motorSpeed = preSpeed;
      count      = preCount;
      togCounter    = 0;
      Serial.println("********");
      Serial.print("resume speed is: ");
      Serial.println(motorSpeed);
      Serial.print("resume count is: ");
      Serial.println(count);
      Serial.print("pos stop is: ");
      Serial.println(val);
      Serial.println("********");
    }
    else
    {
      
    }
    
  }

  void setup()
  {
    Serial.begin(9600);
    Serial.println("Dual MC33926 Motor Shield");
    pinMode(toggleStop, INPUT);
    pinMode(inSpeedPin, INPUT);
    pinMode(reSpeedPin, INPUT);
    pinMode(pushPullPin, INPUT);
    pinMode(pausePin, INPUT);
    md.init();
  }

  void loop()
  {   
    int data = digitalRead(pushPullPin) ;
    val = analogRead(analogPin);    // read the input pin, need to be before init else init has no val data
 
      if (first1 == 0)
    {
      speedInit();
    }
  //******************* Main operation ************************
  //**OPERATION is first syringe needs to travel to min point and wait there, switch at min must be 0
  //**When the switch on, syringe travel out, pushPullpin is now high
  //**High pin will be kept until reach max point, high will keep syringe stay at max
  //**Turn low to travel back to 0ml position
        //********************************************************8
  if (data == 0)
  {
    if (motorSpeed > 0 )
    {
      motorSpeed = motorSpeed;
    }
    else
    {
      motorSpeed = 0-motorSpeed;
    }
  }
  else
  {
    if (motorSpeed > 0 )
    {
      motorSpeed = 0-motorSpeed;
    }
    else
    {
      motorSpeed = motorSpeed;
    }
  }
    buttonCheck1();
    md.setM1Speed(motorSpeed);
  }
