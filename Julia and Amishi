  #include "DualMC33926MotorShield.h"
  #include "ctype.h"
//  #define chosenSpeed 160
  #define MINchosenSpeed 160
  #define MAXchosenSpeed 400
  #define VOL04   830
  #define VOL03   708
  #define VOL02   573
  #define VOL01   450
  #define VOL005  372
  #define VOL002  32
  #define MINPOS1 293
  #define MINPOS2 270
  #define MINPOS3 295
  DualMC33926MotorShield md;
  //*** Serial input data
  int chosenSpeed = 160;
 char stringB [5]; 
 char speedString [5];
 int done = 0;
 int counter = 0;
  //**********************
  unsigned long time1;
  int chosenVolume = VOL04;
  int motorSpeed = chosenSpeed;
  unsigned long last = 0;
  unsigned long diff = 0;
  //**********Pin declaration
  const int analogPin = 2;     // potentiometer wiper (middle terminal) connected to analog pin 3
  const int toggleStop = 5;
  const int inSpeedPin = 6;
  const int reSpeedPin = 13;
  const int pushPullPin = 11;
  const int pausePin = 13;
  //******************************
  int chosenMin = MINPOS2;
  int val = 0;           // variable to store the value read
  int prePos = 0;
  int count = 0;
  int first1 = 0;
  int togCounter = 0;
  int inCounter = 1;
  int reCounter = 1;
  int preSpeed;
  int preCount;
  int preSpeed2 = 0;
  int dataToggle;
  int dataRe;
  int dataIn;
  int val4 = 0;
  int chosenVal = 0;
  int preSpeed3 = 0;
  int loopCounter1 = 0;
  int maxCounter = 0;
  int currentTime = 0;
  int preTime = 0;
  int timeDiff = 0;
  int preHa = 0;
  int aftHa = 0;
  int maxVal = 0;
  int speedTrigger = 0;
  int maxLoopTrigger = 0;
  int tog = 0;
  int minChosen = 0;
  int speedInitCounter = 0;
  int wantOut = 0;
 int wantIn = 0;
  void stopIfFault()
  {
    if (md.getFault())
    {
      Serial.println("fault");
      while(1);
    }
  }
  
  void speedInit()
  { 
        val = analogRead(analogPin);  
        Serial.println("please input desired location, must be number");
        char ch;
        counter = 0;
        done = 0;
  //*********************      
        while(done == 0)
        {
          ch = Serial.read();
          if(isdigit(ch) == 1)
          {
          stringB[counter] = ch;
          counter++;
          Serial.print("enter distance number is ");
          Serial.println(ch);
          }
          else if (isAlpha(ch) == 1)
          {
            if (ch == 'x')
            {
              Serial.println("done input");
              done = 1;
            }
          }
        }
        stringB[counter] = '\0';
        Serial.println("done, distance is");
        Serial.println(stringB);
        int b = atoi(stringB);
        chosenVolume = b;
        Serial.println("Location is ");
        Serial.println(b);
        done = 0;
        counter  = 0;
 //******************************  
 if (first1 == 0)
 {
   Serial.println("please input speed, must be number"); 
        while(done == 0)
        {
          ch = Serial.read();
          if(isdigit(ch) == 1)
          {
          speedString[counter] = ch;
          counter++;
          Serial.print("enter speed number is ");
          Serial.println(ch);
          }
          else if (isAlpha(ch) == 1)
          {
            if (ch == 'x')
            {
              Serial.println("done input");
              done = 1;
            }
          }
        }
        speedString[counter] = '\0';
        Serial.println("done, speed is");
        Serial.println(speedString);
        int d = atoi(speedString);
        chosenSpeed = d;
        Serial.println("converted speed is ");
        Serial.println(chosenSpeed);
              Serial.println(wantOut);
         Serial.print("wantin is ");
        Serial.println(wantIn);
        Serial.println("*************");
        done = 0;
        counter = 0;
 }
 //****************************
if (val < chosenVolume)
      {
          Serial.println("moving out");
          wantOut = 1;
          motorSpeed = 0 - chosenSpeed; 
      }
      else if  (val > chosenVolume)
      {
        Serial.println("moving in");
        wantIn = 1;
        motorSpeed = chosenSpeed;
      }
      else if (val == chosenVolume)
      {
        motorSpeed = 0; // now moving into,will meet min first and need to reverse, count must = 0 be considered at min
        Serial.println("already at desired location");
      } 
 //******************************
      first1++;
      Serial.println("******************************");
      Serial.print("first chosenSpeed is: ");
      Serial.println(motorSpeed);
      Serial.print("current position is: ");
      Serial.println(val);
      Serial.print("desired location is: ");
      Serial.println(b);
      Serial.println("******************************");
      md.setM1Speed(motorSpeed);
  }
   
   
  //1st cases: max <----- 1023: want to keep it going, if at max, if speed > 0 then do nothing, count must = 1
  //2nd cases: min <----- max : want to reverse it   , if at min, if speed > 0 then reverse, count must = 0
  //3rd cases: 0   -----> min : want to keep it going, if at min, if speed < 0 then do nothing, count must = 0
  //4th cases: min -----> max : want to reverse it   , if at max, if speed < 0 then reverse , count must = 1
  //5th cases: at min         : want to set count to 0 so that below function will turn it into 1 and not change negative speed
  //6th cases: at max         : want to set count to 1 so that below function will turn it into 0 and not change positive speed
  int trigger = 0;
  void setup()
  {
    Serial.begin(9600);
    Serial.println("Dual MC33926 Motor Shield");
    while (! Serial); 
    md.init();
  }
int ten = 0;
int counter4 = 0;
  void loop()
  { 

    val = analogRead(analogPin);    // read the input pin, need to be before init else init has no val data
    if (speedInitCounter == 0)
    {
      speedInit();
      speedInitCounter++;
      Serial.println("speed init");
    }

     if (val < chosenVolume)
      {
        if (wantOut)
        {
            motorSpeed = 0 - chosenSpeed; // currently below or at min, need to go out cross min and stop at max => want to skip the first = set count to 1       
            wantIn = 0;
            Serial.println("*************8");
            Serial.println("moving out");
                Serial.print("val is ");
                Serial.println(val);
                   Serial.print("desired is ");
                Serial.println(chosenVolume);
                    Serial.print("wantOut is ");
        Serial.println(wantOut);
         Serial.print("wantin is ");
        Serial.println(wantIn);
        Serial.println("*************");
        }
        else if (wantOut == 0)
        {
          Serial.println("low desired reach");
          motorSpeed = 0;
          md.setM1Speed(motorSpeed);
          wantIn = 0;
        }
      }
      else if  (val > chosenVolume)
      {
        if (wantIn)
        {
        motorSpeed = chosenSpeed;  //  currently above or at max, need to go in cross max and stop at min, but meet max first => want to skip the first = set count to 0
        wantOut = 0;
                    Serial.println("*************8");
            Serial.println("moving in");
                Serial.print("val is ");
                Serial.println(val);
                   Serial.print("desired is ");
                Serial.println(chosenVolume);
                    Serial.print("wantOut is ");
        Serial.println(wantOut);
         Serial.print("wantin is ");
        Serial.println(wantIn);
        Serial.println("*************");
        }
        else if (wantIn == 0)
        {
          motorSpeed = 0;
          md.setM1Speed(motorSpeed);
                Serial.println("high desired reach");
               counter4 ++;
          wantOut = 0;
        }
      }
      else if (val == chosenVolume)
      {
        motorSpeed = 0; // now moving into,will meet min first and need to reverse, count must = 0 be considered at min
        md.setM1Speed(motorSpeed);
        wantOut = 0;
        wantIn = 0;
        Serial.println("already at desired location");
      } 

      if (motorSpeed == 0)
      {
        speedInit();
      }
    md.setM1Speed(motorSpeed);
  
  }

  
